#!/bin/sh -a
#shellcheck disable=SC2129

WINEMAN_EXECUTABLE_DIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

if [ "$XDG_DATA_HOME" = "" ]
then
    WINEMAN_ROOT="$HOME/.local/share/wineman"
else
    WINEMAN_ROOT="$XDG_DATA_HOME"
fi

WINE_URL="https://github.com/GloriousEggroll/wine-ge-custom/releases/download/GE-Proton8-26/wine-lutris-GE-Proton8-26-x86_64.tar.xz"
WINETRICKS_URL="https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks"
DXVK_CONF_URL="https://raw.githubusercontent.com/10xJSChad/wineman/master/defaults/dxvk.conf"
ENVIRONMENT_SH_URL="https://raw.githubusercontent.com/10xJSChad/wineman/master/defaults/environment.sh"
ICON_URL="https://github.com/10xJSChad/wineman/raw/master/defaults/icon"

WINEDEBUG="-all"
WINEPREFIX="$WINEMAN_ROOT/prefix/pf_base"
WINETRICKS="$WINEMAN_ROOT/deps/winetricks"
WINEBOOT="$WINEMAN_ROOT/deps/wine/bin/wineboot"
WINE="$WINEMAN_ROOT/deps/wine/bin/wine"
WINESERVER="$WINEMAN_ROOT/deps/wine/bin/wineserver"

command="$1"


install_wine() {
    if [ -f "$WINEMAN_ROOT/tmp/wine.tar" ]
    then
        echo "Deleting old wine tarball"
        rm "$WINEMAN_ROOT/tmp/wine.tar"
    fi

    if [ -f "$WINETRICKS" ]
    then
        echo "Deleting previous winetricks installation"
        rm "$WINETRICKS"
    fi

    if [ -d "$WINEMAN_ROOT/deps/wine" ]
    then
        echo "Deleting previous wine installation"
        rm -rf "$WINEMAN_ROOT/deps/wine"
    fi

    echo "Downloading wine"
    wget "$WINE_URL" -O "$WINEMAN_ROOT/tmp/wine.tar"

    echo "Extracting wine to $WINEMAN_ROOT/deps"
    tar -xf "$WINEMAN_ROOT/tmp/wine.tar" -C "$WINEMAN_ROOT/deps"

    echo "Renaming extracted directory"
    mv "$WINEMAN_ROOT/deps/"* "$WINEMAN_ROOT/deps/wine"

    echo "Deleting wine tarball"
    rm "$WINEMAN_ROOT/tmp/wine.tar"

    echo "Downloading winetricks"
    curl "$WINETRICKS_URL" > "$WINETRICKS"
    chmod +x "$WINETRICKS"

    return 0
}


download_defaults() {
    echo "Downloading environment.sh"
    curl "$ENVIRONMENT_SH_URL" > "$WINEMAN_ROOT/defaults/environment.sh"

    echo "Downloading dxvk.conf"
    curl "$DXVK_CONF_URL" > "$WINEMAN_ROOT/defaults/dxvk.conf"

    echo "Downloading icon"
    wget "$ICON_URL" -O "$WINEMAN_ROOT/defaults/icon"
}


setup_wineprefix() {
    echo "Creating base prefix"
    echo "Installing corefonts"
    "$WINETRICKS" -q corefonts

    # echo "Installing ie8"
    # sh "$WINETRICKS" -q ie8

    echo "Installing dxvk"
    "$WINETRICKS" -q dxvk

    echo "Installing vkd3d"
    "$WINETRICKS" -q vkd3d

    echo "Enabling csmt"
    "$WINETRICKS" csmt=on

    echo "Setting Windows version to win10"

    sed -i '/CurrentBuildNumber/c\"CurrentBuildNumber"="19042"' "$WINEPREFIX/system.reg"
    sed -i '/CurrentBuild"/c\"CurrentBuild"="19042"' "$WINEPREFIX/system.reg"

    echo "Initializing prefix"
    exec "$WINEBOOT"
}


clone_wineprefix() {
    cp -Rsn "$1/." "$2"
    
    if ! [ -d "$2/drive_c" ]
    then
        echo "$2 does not appear to be a valid wineprefix, aborting."
        return 1
    fi

    find "$2" -type l       \
    ! -name "*.exe"         \
    ! -name "*.dll"         \
    ! -name "*.ttf"         \
    ! -name "*.installed"   \
    ! -name "*.000"         \
    ! -name "*.wav"         \
    ! -name "*.drv"         \
    ! -name "*.sys"         \
    ! -name "*.msi"         \
    ! -name "*.nls"         \
    -delete

    cp -rn "$1/." "$2"
    return 0
}


if [ "$command" = "" ]
then
    echo "usage: wineman [COMMAND] [ARGS]"
    echo "commands:"
    echo "  wineman setup"
    echo "  wineman reinstall"
    echo "  wineman upgrade"
    
    echo
    echo "  wineman install-wine"
    echo "  wineman download-defaults"
    echo "  wineman setup-wineprefix"
    echo
    echo "  wineman run [APPLICATION NAME]"
    echo "  wineman add [APPLICATION NAME] [APPLICATION EXECUTABLE]"
    exit 1
fi


if [ "$command" = "install-wine" ]
then
    install_wine
fi


if [ "$command" = "download-defaults" ]
then
    download_defaults
fi


if [ "$command" = "setup-wineprefix" ]
then
    download_defaults
fi


if [ "$command" = "setup" ]
then
    echo "Starting wineman setup"
    mkdir "$WINEMAN_ROOT"
    mkdir "$WINEMAN_ROOT/applications" 
    mkdir "$WINEMAN_ROOT/defaults" 
    mkdir "$WINEMAN_ROOT/deps" 
    mkdir "$WINEMAN_ROOT/prefix" 
    mkdir "$WINEMAN_ROOT/shadercache" 
    mkdir "$WINEMAN_ROOT/tmp"

    install_wine
    download_defaults
    setup_wineprefix

    echo "Success!"
fi


if [ "$command" = "add" ]
then
    if [ "$2" = "" ] || [ "$3" = "" ]
    then
        echo "Syntax error"
        exit 1
    fi

    application_name="$2"
    application_executable=$(realpath "$3")
    application_dir="$WINEMAN_ROOT/applications/$application_name"
    application_config="$application_dir/config.sh"

    source_prefix="$WINEMAN_ROOT/prefix/pf_base"
    destination_prefix="$WINEMAN_ROOT/prefix/pf_$application_name"
    clone_wineprefix "$source_prefix" "$destination_prefix"

    mkdir "$WINEMAN_ROOT/shadercache/$application_name"
    mkdir "$application_dir"

    ln -s "$WINEMAN_ROOT/shadercache/$application_name" "$application_dir/shadercache"
    ln -s "$WINEMAN_ROOT/prefix/pf_$application_name" "$application_dir/prefix"
    cp -Rsn "$WINEMAN_ROOT/defaults/". "$application_dir"

    echo "#!/bin/sh -a" > "$application_config"
    echo "APP_NAME=\"$application_name\"" >> "$application_config"
    echo "APP_EXECUTABLE=\"$application_executable\"" >> "$application_config"
    echo "APP_ENVIRONMENT=\"$application_dir/environment.sh\"" >> "$application_config"

    echo "[Desktop Entry]" > "$application_dir/$application_name.desktop"
    echo "Type=Application" >> "$application_dir/$application_name.desktop"
    echo "Name=$application_name" >> "$application_dir/$application_name.desktop"
    echo "Icon=$application_dir/icon" >> "$application_dir/$application_name.desktop"
    echo "Path=$WINEMAN_EXECUTABLE_DIR" >> "$application_dir/$application_name.desktop"
    echo "Exec=$WINEMAN_EXECUTABLE_DIR/wineman run \"$application_name\"" >> "$application_dir/$application_name.desktop"
    chmod +x "$application_dir/$application_name.desktop"
    
    if [ -d "$HOME/.local/share/applications" ]
    then
        ln -s "$application_dir/$application_name.desktop" "$HOME/.local/share/applications/wineman_$application_name.desktop" 
    fi
fi


if [ "$command" = "cleanup" ]
then
    if [ -d "$HOME/.local/share/applications" ]
    then
        rm "$HOME/.local/share/applications/wineman_"*
    fi
fi


if [ "$command" = "upgrade" ]
then
    echo "Deleting previous base prefix"
    rm -rf "$WINEMAN_ROOT/prefix/pf_base"
    install_wine
    setup_wineprefix
fi


if [ "$command" = "run" ]
then
    if [ "$2" = "" ]
    then
        echo "Syntax error"
    fi

    application_name="$2"
    application_dir="$WINEMAN_ROOT/applications/$application_name"
    application_config="$application_dir/config.sh"
    
    WINEMAN_APP_DIR="$application_dir"

    . "$application_config"
    . "$APP_ENVIRONMENT"

    "$WINE" "$APP_EXECUTABLE"
fi
